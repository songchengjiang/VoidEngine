#include "ParticleSphereRenderer.h"
#include "KernelCore/Node.h"
#include "KernelCore/Camera.h"
#include "KernelCore/RenderQueue.h"
#include "ParticleSystem.h"
#include "Particle.h"

#define VERTEX_BUFFER_SIZE 1000
#define INDEX_BUFFER_SIZE 960

static double sphere_vertices[VERTEX_BUFFER_SIZE] = {
    0.000000,0.000000,0.500000,0.600000,1.000000
    ,0.136633,0.000000,0.480969,0.500000,0.911896
    ,0.042222,0.129946,0.480969,0.700000,0.911896
    ,0.262866,0.000000,0.425325,0.500000,0.823792
    ,0.180902,0.131433,0.447214,0.600000,0.852416
    ,0.180902,0.131433,0.447214,0.600000,0.852416
    ,0.081230,0.250000,0.425325,0.700000,0.823792
    ,0.369088,0.000000,0.337304,0.500000,0.735688
    ,0.308932,0.132338,0.370199,0.564414,0.765363
    ,0.221327,0.252917,0.370199,0.635586,0.765363
    ,0.114054,0.351023,0.337304,0.700000,0.735688
    ,0.447214,0.000000,0.223607,0.500000,0.647584
    ,0.411310,0.129946,0.252860,0.548703,0.668773
    ,0.344095,0.250000,0.262866,0.600000,0.676208
    ,0.250688,0.351023,0.252860,0.651297,0.668773
    ,0.138197,0.425325,0.223607,0.700000,0.647584
    ,0.000000,0.000000,0.500000,0.800000,1.000000
    ,0.042222,0.129946,0.480969,0.700000,0.911896
    ,-0.110539,0.080311,0.480969,0.900000,0.911896
    ,-0.069098,0.212663,0.447214,0.800000,0.852416
    ,-0.069098,0.212663,0.447214,0.800000,0.852416
    ,-0.212663,0.154508,0.425325,0.900000,0.823792
    ,-0.030396,0.334707,0.370199,0.764414,0.765363
    ,-0.172145,0.288650,0.370199,0.835586,0.765363
    ,-0.298598,0.216944,0.337304,0.900000,0.735688
    ,0.003516,0.431334,0.252860,0.748703,0.668773
    ,-0.131433,0.404508,0.262866,0.800000,0.676208
    ,-0.256376,0.346890,0.252860,0.851297,0.668773
    ,-0.361803,0.262866,0.223607,0.900000,0.647584
    ,0.000000,0.000000,0.500000,0.000000,1.000000
    ,-0.110539,0.080311,0.480969,-0.100000,0.911896
    ,-0.110539,-0.080311,0.480969,0.100000,0.911896
    ,-0.212663,0.154508,0.425325,-0.100000,0.823792
    ,-0.223607,-0.000000,0.447214,0.000000,0.852416
    ,-0.223607,-0.000000,0.447214,0.000000,0.852416
    ,-0.212663,-0.154509,0.425325,0.100000,0.823792
    ,-0.327718,0.074522,0.370199,0.964414,0.765363
    ,-0.327718,0.074522,0.370199,-0.035586,0.765363
    ,-0.327718,-0.074522,0.370199,0.035586,0.765363
    ,-0.298598,-0.216944,0.337304,0.100000,0.735688
    ,-0.409137,0.136633,0.252860,0.948703,0.668773
    ,-0.409137,0.136633,0.252860,-0.051297,0.668773
    ,-0.425325,-0.000000,0.262866,0.000000,0.676208
    ,-0.409137,-0.136633,0.252860,0.051297,0.668773
    ,-0.361803,-0.262866,0.223607,0.100000,0.647584
    ,0.000000,0.000000,0.500000,0.200000,1.000000
    ,-0.110539,-0.080311,0.480969,0.100000,0.911896
    ,0.042222,-0.129946,0.480969,0.300000,0.911896
    ,-0.069098,-0.212663,0.447214,0.200000,0.852416
    ,-0.069098,-0.212663,0.447214,0.200000,0.852416
    ,0.081230,-0.250000,0.425325,0.300000,0.823792
    ,-0.172145,-0.288650,0.370199,0.164414,0.765363
    ,-0.030396,-0.334707,0.370199,0.235586,0.765363
    ,0.114054,-0.351023,0.337304,0.300000,0.735688
    ,-0.256376,-0.346890,0.252860,0.148703,0.668773
    ,-0.131433,-0.404509,0.262866,0.200000,0.676208
    ,0.003516,-0.431334,0.252860,0.251297,0.668773
    ,0.138197,-0.425325,0.223607,0.300000,0.647584
    ,0.000000,0.000000,0.500000,0.400000,1.000000
    ,0.042222,-0.129946,0.480969,0.300000,0.911896
    ,0.136633,0.000000,0.480969,0.500000,0.911896
    ,0.180902,-0.131433,0.447214,0.400000,0.852416
    ,0.180902,-0.131433,0.447214,0.400000,0.852416
    ,0.221327,-0.252917,0.370199,0.364414,0.765363
    ,0.308932,-0.132338,0.370199,0.435586,0.765363
    ,0.250688,-0.351023,0.252860,0.348703,0.668773
    ,0.344095,-0.250000,0.262866,0.400000,0.676208
    ,0.411310,-0.129946,0.252860,0.451297,0.668773
    ,0.479626,-0.080311,0.116227,0.473595,0.574676
    ,0.479626,0.080311,0.116227,0.526405,0.574676
    ,0.475528,-0.154508,0.000000,0.450000,0.500000
    ,0.500000,0.000000,0.000000,0.500000,0.500000
    ,0.475528,0.154508,0.000000,0.550000,0.500000
    ,0.435232,-0.216944,-0.116227,0.426405,0.425324
    ,0.477676,-0.074522,-0.127562,0.475369,0.417884
    ,0.477676,0.074522,-0.127562,0.524631,0.417884
    ,0.435231,0.216944,-0.116227,0.573595,0.425324
    ,0.361804,-0.262865,-0.223607,0.400000,0.352416
    ,0.409137,-0.136633,-0.252860,0.448703,0.331227
    ,0.425325,0.000000,-0.262866,0.500000,0.323792
    ,0.409137,0.136633,-0.252860,0.551297,0.331227
    ,0.361803,0.262866,-0.223607,0.600000,0.352416
    ,0.224593,0.431334,0.116227,0.673595,0.574676
    ,0.071832,0.480969,0.116227,0.726405,0.574676
    ,0.293893,0.404508,0.000000,0.650000,0.500000
    ,0.154508,0.475528,0.000000,0.700000,0.500000
    ,-0.000000,0.500000,0.000000,0.750000,0.500000
    ,0.340820,0.346890,-0.116227,0.626405,0.425324
    ,0.218485,0.431268,-0.127562,0.675369,0.417884
    ,0.076735,0.477326,-0.127562,0.724631,0.417884
    ,-0.071832,0.480969,-0.116227,0.773595,0.425324
    ,0.256376,0.346890,-0.252860,0.648703,0.331227
    ,0.131433,0.404508,-0.262866,0.700000,0.323792
    ,-0.003516,0.431334,-0.252860,0.751297,0.331227
    ,-0.138197,0.425325,-0.223607,0.800000,0.352416
    ,-0.340820,0.346890,0.116227,0.873595,0.574676
    ,-0.435231,0.216944,0.116227,0.926405,0.574676
    ,-0.293893,0.404508,0.000000,0.850000,0.500000
    ,-0.404509,0.293893,0.000000,0.900000,0.500000
    ,-0.475528,0.154508,0.000000,0.950000,0.500000
    ,-0.224593,0.431334,-0.116227,0.826405,0.425324
    ,-0.342645,0.341060,-0.127562,0.875369,0.417884
    ,-0.430251,0.220481,-0.127562,0.924631,0.417884
    ,-0.479626,0.080311,-0.116227,0.973595,0.425324
    ,-0.250688,0.351023,-0.252860,0.848703,0.331227
    ,-0.344095,0.250000,-0.262866,0.900000,0.323792
    ,-0.411310,0.129946,-0.252860,0.951297,0.331227
    ,-0.479626,0.080311,-0.116227,-0.026405,0.425324
    ,-0.411310,0.129946,-0.252860,-0.048703,0.331227
    ,-0.447214,-0.000000,-0.223607,0.000000,0.352416
    ,-0.435231,-0.216944,0.116227,0.073595,0.574676
    ,-0.340820,-0.346890,0.116227,0.126405,0.574676
    ,-0.475528,-0.154509,0.000000,0.050000,0.500000
    ,-0.404508,-0.293893,0.000000,0.100000,0.500000
    ,-0.293893,-0.404509,0.000000,0.150000,0.500000
    ,-0.479626,-0.080311,-0.116227,0.026405,0.425324
    ,-0.430251,-0.220481,-0.127562,0.075369,0.417884
    ,-0.342645,-0.341061,-0.127562,0.124631,0.417884
    ,-0.224593,-0.431334,-0.116227,0.173595,0.425324
    ,-0.411310,-0.129946,-0.252860,0.048703,0.331227
    ,-0.344095,-0.250000,-0.262866,0.100000,0.323792
    ,-0.250688,-0.351023,-0.252860,0.151297,0.331227
    ,-0.138197,-0.425325,-0.223607,0.200000,0.352416
    ,0.071832,-0.480969,0.116227,0.273595,0.574676
    ,0.224593,-0.431334,0.116227,0.326405,0.574676
    ,0.000000,-0.500000,0.000000,0.250000,0.500000
    ,0.154509,-0.475528,0.000000,0.300000,0.500000
    ,0.293893,-0.404508,0.000000,0.350000,0.500000
    ,-0.071832,-0.480969,-0.116227,0.226405,0.425324
    ,0.076735,-0.477325,-0.127562,0.275369,0.417884
    ,0.218485,-0.431268,-0.127562,0.324631,0.417884
    ,0.340820,-0.346890,-0.116227,0.373595,0.425324
    ,-0.003516,-0.431334,-0.252860,0.248703,0.331227
    ,0.131433,-0.404508,-0.262866,0.300000,0.323792
    ,0.256376,-0.346890,-0.252860,0.351297,0.331227
    ,0.404508,0.293893,0.000000,0.600000,0.500000
    ,0.342645,0.341060,0.127562,0.624631,0.582116
    ,0.430251,0.220481,0.127562,0.575369,0.582116
    ,-0.154509,0.475528,0.000000,0.800000,0.500000
    ,-0.218485,0.431268,0.127562,0.824631,0.582116
    ,-0.076735,0.477325,0.127562,0.775369,0.582116
    ,-0.500000,-0.000000,0.000000,0.000000,0.500000
    ,-0.475528,0.154508,0.000000,-0.050000,0.500000
    ,-0.477676,-0.074522,0.127562,0.024631,0.582116
    ,-0.477676,0.074522,0.127562,-0.024631,0.582116
    ,-0.477676,0.074522,0.127562,0.975369,0.582116
    ,-0.154508,-0.475528,0.000000,0.200000,0.500000
    ,-0.076735,-0.477325,0.127562,0.224631,0.582116
    ,-0.218485,-0.431268,0.127562,0.175369,0.582116
    ,0.404509,-0.293893,0.000000,0.400000,0.500000
    ,0.430251,-0.220481,0.127562,0.424631,0.582116
    ,0.342645,-0.341060,0.127562,0.375369,0.582116
    ,0.000000,0.000000,-0.500000,0.700000,0.000000
    ,-0.042222,0.129946,-0.480969,0.800000,0.088104
    ,0.110539,0.080311,-0.480969,0.600000,0.088104
    ,-0.081230,0.250000,-0.425325,0.800000,0.176208
    ,0.069098,0.212663,-0.447214,0.700000,0.147584
    ,0.069098,0.212663,-0.447214,0.700000,0.147584
    ,0.212663,0.154508,-0.425325,0.600000,0.176208
    ,-0.114054,0.351023,-0.337304,0.800000,0.264312
    ,0.030396,0.334707,-0.370199,0.735586,0.234637
    ,0.172145,0.288650,-0.370199,0.664414,0.234637
    ,0.298598,0.216944,-0.337304,0.600000,0.264312
    ,0.000000,0.000000,-0.500000,-0.100000,0.000000
    ,-0.136633,-0.000000,-0.480969,0.000000,0.088104
    ,-0.042222,0.129946,-0.480969,-0.200000,0.088104
    ,-0.262866,-0.000000,-0.425325,0.000000,0.176208
    ,-0.180902,0.131433,-0.447214,-0.100000,0.147584
    ,-0.042222,0.129946,-0.480969,0.800000,0.088104
    ,-0.180902,0.131433,-0.447214,0.900000,0.147584
    ,-0.369088,-0.000000,-0.337304,0.000000,0.264312
    ,-0.308932,0.132338,-0.370199,-0.064414,0.234637
    ,-0.180902,0.131433,-0.447214,0.900000,0.147584
    ,-0.308932,0.132338,-0.370199,0.935586,0.234637
    ,-0.221327,0.252917,-0.370199,0.864414,0.234637
    ,0.000000,0.000000,-0.500000,0.100000,0.000000
    ,-0.042222,-0.129946,-0.480969,0.200000,0.088104
    ,-0.136633,-0.000000,-0.480969,0.000000,0.088104
    ,-0.081230,-0.250000,-0.425325,0.200000,0.176208
    ,-0.180902,-0.131433,-0.447214,0.100000,0.147584
    ,-0.180902,-0.131433,-0.447214,0.100000,0.147584
    ,-0.114054,-0.351023,-0.337304,0.200000,0.264312
    ,-0.221327,-0.252917,-0.370199,0.135586,0.234637
    ,-0.308932,-0.132338,-0.370199,0.064414,0.234637
    ,0.000000,0.000000,-0.500000,0.300000,0.000000
    ,0.110539,-0.080311,-0.480969,0.400000,0.088104
    ,-0.042222,-0.129946,-0.480969,0.200000,0.088104
    ,0.212663,-0.154508,-0.425325,0.400000,0.176208
    ,0.069098,-0.212663,-0.447214,0.300000,0.147584
    ,0.069098,-0.212663,-0.447214,0.300000,0.147584
    ,0.298598,-0.216944,-0.337304,0.400000,0.264312
    ,0.172145,-0.288650,-0.370199,0.335586,0.234637
    ,0.030396,-0.334707,-0.370199,0.264414,0.234637
    ,0.000000,0.000000,-0.500000,0.500000,0.000000
    ,0.110539,0.080311,-0.480969,0.600000,0.088104
    ,0.110539,-0.080311,-0.480969,0.400000,0.088104
    ,0.223607,0.000000,-0.447214,0.500000,0.147584
    ,0.223607,0.000000,-0.447214,0.500000,0.147584
    ,0.327718,0.074522,-0.370199,0.535586,0.234637
    ,0.327718,-0.074522,-0.370199,0.464414,0.234637
};

static uint16_t sphere_indices[INDEX_BUFFER_SIZE] = {
    0,1,2,1,3,4,1,4,2,2,5,6,4,9,6,6,9,10,17,6,19,6,10,22
    ,6,22,19,3,8,4,4,8,9,8,13,9,9,13,14,9,14,10,3,7,8,7,12,8
    ,8,12,13,136,14,13,136,13,137,137,13,12,10,14,15,82,15,14,82,14,136,84,82,136
    ,84,136,135,135,136,137,135,137,72,72,137,69,137,12,69,87,84,135,87,135,76,76,135,72
    ,82,84,85,84,87,88,84,88,85,87,81,91,87,91,88,81,87,76,72,75,76,75,80,76
    ,76,80,81,162,91,81,162,81,80,88,91,92,161,92,91,161,91,162,85,88,89,88,92,89
    ,89,92,93,160,93,92,160,92,161,156,160,161,156,161,158,158,161,162,158,162,198,162,80,198
    ,154,157,158,194,158,196,158,198,196,196,198,199,198,80,79,198,79,199,194,196,195,196,199,187
    ,193,194,195,195,197,187,185,187,188,187,190,191,187,191,188,187,199,190,184,185,186,185,188,186
    ,188,191,192,188,192,178,190,134,191,191,134,133,191,133,192,178,192,181,192,133,132,192,132,181
    ,129,132,133,129,133,130,130,133,134,130,134,131,131,134,77,190,77,134,126,129,130,126,130,127
    ,127,130,131,77,73,131,73,149,131,131,149,127,73,77,78,190,78,77,199,78,190,73,78,74
    ,74,78,79,199,79,78,70,73,74,73,70,149,70,150,149,149,150,151,149,151,127,68,70,71
    ,70,74,71,70,68,150,71,74,75,74,79,75,75,79,80,71,75,72,68,71,69,69,71,72
    ,11,68,69,68,11,67,68,67,150,69,12,11,7,11,12,7,67,11,64,66,67,64,67,7
    ,150,67,66,3,64,7,61,63,64,61,64,3,63,66,64,63,65,66,150,66,151,151,66,65
    ,50,53,63,50,63,61,53,65,63,59,50,61,59,61,60,47,49,50,48,52,50,50,52,53
    ,45,46,47,46,48,47,46,35,48,35,51,48,48,51,52,51,55,52,52,55,56,52,56,53
    ,35,39,51,39,54,51,51,54,55,147,56,55,147,55,148,148,55,54,53,56,57,123,57,56
    ,123,56,147,53,57,65,57,123,124,124,65,57,123,125,126,123,126,124,125,123,147,125,147,146
    ,146,147,148,125,128,129,125,129,126,128,125,146,124,126,127,127,151,124,151,65,124,128,146,118
    ,118,146,114,146,148,114,114,117,118,117,121,118,118,121,122,122,128,118,111,113,114,113,117,114
    ,114,148,111,148,54,111,44,110,111,110,113,111,111,54,44,110,112,113,112,116,113,113,116,117
    ,112,110,143,110,44,43,110,43,143,39,43,44,39,44,54,38,42,43,38,43,39,143,43,42
    ,112,143,141,141,143,144,143,42,144,37,41,42,37,42,38,144,42,41,33,37,38,33,38,35
    ,35,38,39,32,37,33,30,32,33,30,33,31,29,30,31,31,34,35,141,144,142,107,141,142
    ,107,108,109,109,115,107,115,141,107,115,112,141,112,115,116,115,109,119,115,119,116,170,109,108
    ,170,119,109,170,108,171,166,170,171,166,183,170,183,119,170,116,119,120,183,120,119,116,120,117
    ,117,120,121,182,121,120,182,120,183,179,182,183,179,183,166,178,181,182,178,182,179,181,121,182
    ,181,122,121,181,132,122,128,122,132,128,132,129,176,178,179,176,179,177,186,189,178,175,176,177
    ,177,180,166,164,166,167,166,171,167,163,164,165,164,167,165,58,59,60,60,62,3,152,153,154
    ,153,156,154,153,155,156,155,160,156,155,159,160,168,169,155,172,174,155,155,174,159,159,93,160
    ,159,94,93,174,104,159,159,104,94,172,173,174,173,105,174,174,105,104,100,94,104,100,104,101
    ,101,104,105,90,93,94,94,100,90,89,93,90,86,89,90,100,138,90,90,138,86,97,100,101
    ,100,97,138,97,101,98,98,101,102,101,105,102,95,97,98,97,95,139,97,139,138,138,139,140
    ,138,140,86,95,27,139,139,27,26,139,26,140,28,95,96,95,98,96,95,28,27,23,26,27
    ,23,27,24,24,27,28,22,25,26,22,26,23,140,26,25,19,22,23,19,23,21,21,23,24
    ,21,24,36,24,28,40,24,40,36,96,40,28,145,40,96,99,145,96,96,98,99,98,102,99
    ,99,102,103,102,105,106,102,106,103,173,106,105,18,20,21,16,17,18,17,19,18,10,25,22
    ,10,15,25,140,25,83,83,25,15,15,82,83,82,85,83,83,85,86,86,140,83,85,89,86
};


veParticleSphereRenderer::veParticleSphereRenderer()
{
    for (unsigned int i = 0; i < VERTEX_BUFFER_SIZE; i += 5) {
        _vertices.push_back(sphere_vertices[i + 0]); _vertices.push_back(sphere_vertices[i + 1]); _vertices.push_back(sphere_vertices[i + 2]); //v
        _vertices.push_back(sphere_vertices[i + 3]); _vertices.push_back(sphere_vertices[i + 4]);                              //tc
    }

    for (unsigned int face = 0; face < INDEX_BUFFER_SIZE; face += 3) {
        _indices.push_back(sphere_indices[face + 0]); _indices.push_back(sphere_indices[face + 1]); _indices.push_back(sphere_indices[face + 2]);
    }
}

veParticleSphereRenderer::~veParticleSphereRenderer()
{

}

void veParticleSphereRenderer::draw(veRenderCommand &command)
{
    
    if (!command.pass->apply(command))
        return;
    
    glBindVertexArray(_vaoBuffer->getData(command.contextID));
    glDrawElementsInstanced(GL_TRIANGLES, GLsizei(_indices.size()), GL_UNSIGNED_SHORT, nullptr, _instanceCount);
}

void veParticleSphereRenderer::updateInstanceParams(veParticle *particle, const veMat4 &vp)
{
    veMat4 mat = vp * veMat4::transform(particle->position, veVec3(particle->width, particle->height, particle->depth), particle->orientation);
    mat.transpose();
    _mvpMats.push_back(mat);
    _colors.push_back(particle->color);
}

void veParticleSphereRenderer::updateBuffer(veRenderableObject *renderableObj, veCamera *camera, unsigned int contextID)
{
    auto vao = _vaoBuffer->getData(contextID);
    if (!vao) {
        vao = _vaoBuffer->createData(contextID);
        _needUpdate = true;
    }
    if (!_vertices.empty() && !_indices.empty() && _needUpdate){
        
        auto vbo = _vboBuffer->getData(contextID);
        if (!vbo){
            vbo = _vboBuffer->createData(contextID);
        }
        
        auto ibo = _iboBuffer->getData(contextID);
        if (!ibo){
            ibo = _iboBuffer->createData(contextID);
        }
        
        auto mvpbo = _mvpboBuffer->getData(contextID);
        if (!mvpbo){
            mvpbo = _mvpboBuffer->createData(contextID);
        }
        
        auto colorbo = _colorboBuffer->getData(contextID);
        if (!colorbo){
            colorbo = _colorboBuffer->createData(contextID);
        }
        
        glBindVertexArray(vao);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, _vertices.size() * sizeof(_vertices[0]), _vertices.buffer(), GL_STATIC_DRAW);
        
        unsigned int stride = sizeof(GLfloat) * getVertexStride();
        //v
        glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, 0);
        glEnableVertexAttribArray(0);
        
        //tc
        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, stride, (GLvoid *)(sizeof(GLfloat) * 3));
        glEnableVertexAttribArray(1);
        
        glBindBuffer(GL_ARRAY_BUFFER, colorbo);
        glVertexAttribPointer(2, 4, GL_FLOAT, GL_FALSE, 0, 0);
        glVertexAttribDivisor(2, 1);
        glEnableVertexAttribArray(2);
        
        glBindBuffer(GL_ARRAY_BUFFER, mvpbo);
        for (unsigned short i = 0; i < 4; ++i){
            glVertexAttribPointer(3 + i, 4, GL_FLOAT, GL_FALSE, sizeof(veMat4),
                                  (GLvoid*)(sizeof(GLfloat) * i * 4));
            glVertexAttribDivisor(3 + i, 1);
            glEnableVertexAttribArray(3 + i);
        }
        
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, _indices.size() * sizeof(_indices[0]), _indices.buffer(), GL_STATIC_DRAW);

        _needUpdate = false;
    }
    
    _instanceCount = 0;
    _mvpMats.clear();
    _colors.clear();
    veMat4 viewProjMat = camera->projectionMatrix() * camera->viewMatrix();
    
    const auto &particles = static_cast<veParticleSystem *>(renderableObj)->getParticles().getActiveDataList();
    static_cast<veParticleSystem *>(renderableObj)->lock();
    for (auto particle : particles){
        updateInstanceParams(particle, viewProjMat);
        ++_instanceCount;
    }
    static_cast<veParticleSystem *>(renderableObj)->unLock();
    
    if (!_colors.empty()){
        auto colorbo = _colorboBuffer->getData(contextID);
        glBindBuffer(GL_ARRAY_BUFFER, colorbo);
        glBufferData(GL_ARRAY_BUFFER, _colors.size() * sizeof(_colors[0]), _colors.buffer(), GL_DYNAMIC_DRAW);
    }
    
    if (!_mvpMats.empty()){
        auto mvpbo = _mvpboBuffer->getData(contextID);
        glBindBuffer(GL_ARRAY_BUFFER, mvpbo);
        glBufferData(GL_ARRAY_BUFFER, _mvpMats.size() * sizeof(_mvpMats[0]), _mvpMats.buffer(), GL_DYNAMIC_DRAW);
    }
}

unsigned int veParticleSphereRenderer::getVertexStride() const
{
    return 3 + 2;
}
