apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId = "jasoncheng.voidenginetests"
            minSdkVersion.apiLevel = 18
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
            //multiDexEnabled = true
        }

    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs = ["../../../Engine", "../../../Tests"]
                }
            }
            assets {
                source {
                    srcDirs = ["../../../resources"]
                }
            }
        }
        //jni.srcFiles = ["../../../Engine/Vector2.cpp"]
        //jniLibs.srcDir = 'src/main/libs'
    }

    compileOptions.with {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    android.ndk {
        moduleName = "voidenginetests"
        CFlags += "-I${file("../../../Engine")}".toString()
        cppFlags += "-I${file("../../../Engine")}".toString()
        //cppFlags += "-I${file("../../../Engine/BaseCore")}".toString()
        //cppFlags += "-I${file("../../../Engine/Debuger")}".toString()
        //cppFlags += "-I${file("../../../Engine/FileCore")}".toString()
        //cppFlags += "-I${file("../../../Engine/KernelCore")}".toString()
        cppFlags += "-I${file("../../../Dependents")}".toString()
        cppFlags += "-I${file("../../../Dependents/freetype/include")}".toString()
        cppFlags += "-I${file("../../../Dependents/gli")}".toString()
        cppFlags += "-I${file("../../../Dependents/glm")}".toString()
        cppFlags += "-Werror"
        cppFlags += "-frtti"
        cppFlags += "-fno-exceptions"
        cppFlags += "-DANDROID"
        cppFlags += "-std=c++11"
        ldLibs += ["log", "GLESv3", "EGL", "android"]
        stl = "gnustl_static"
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles += file('proguard-android.txt')
        }
    }

    android.productFlavors {
        create("arm7") {
            ndk.abiFilters += "armeabi-v7a"
            ndk.ldFlags += "${file("../../../Dependents/libpng/lib/android/armeabi-v7a/libpng.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/freetype/lib/android/armeabi-v7a/libfreetype.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/libjpeg/lib/android/armeabi-v7a/libjpeg.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/openexr/lib/android/armeabi-v7a/libopenexr.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/zlib/lib/android/armeabi-v7a/libz.a")}".toString()
        }
        create("arm8") {
            ndk.abiFilters += "arm64-v8a"
            ndk.ldFlags += "${file("../../../Dependents/libpng/lib/android/arm64-v8a/libpng.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/freetype/lib/android/arm64-v8a/libfreetype.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/libjpeg/lib/android/arm64-v8a/libjpeg.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/openexr/lib/android/arm64-v8a/libopenexr.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/zlib/lib/android/arm64-v8a/libz.a")}".toString()
        }
        create("x86-64") {
            ndk.abiFilters += "x86_64"
            ndk.ldFlags += "${file("../../../Dependents/libpng/lib/android/x86_64/libpng.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/freetype/lib/android/x86_64/libfreetype.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/libjpeg/lib/android/x86_64/libjpeg.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/openexr/lib/android/x86_64/libopenexr.a")}".toString()
            ndk.ldFlags += "${file("../../../Dependents/zlib/lib/android/x86_64/libz.a")}".toString()
        }
        // for detailed abiFilter descriptions, refer to "Supported ABIs" @
        // https://developer.android.com/ndk/guides/abis.html#sa

        // build one including all cpu architectures
        // create("all")
    }
}
