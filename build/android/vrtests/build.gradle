apply plugin: 'com.android.model.application'
def ndkDir = System.getenv("ANDROID_NDK_HOME")
def propertiesFile = project.rootProject.file('local.properties')
if (propertiesFile.exists()) {
    Properties properties = new Properties()
    properties.load(propertiesFile.newDataInputStream())
    ndkDir = properties.getProperty('ndk.dir')
}
model {
    repositories {
        libs(PrebuiltLibraries) {
            voidengine {
                // Inform Android Studio where header file dir for this lib
                headers.srcDir "../../../Engine"
                // Inform Android Studio where lib is -- each ABI should have a lib file
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("../voidengine/libs/${targetPlatform.getName()}/libvoidengine.so")
                }
            }
        }
    }

    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId = "com.voidengine.vrtests"
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
            versionCode = 1
            versionName = "1.0"
            //multiDexEnabled = true
        }

    }

    android.sources {
        main {
            jni {
                source {
                    srcDirs = ["../../../TestsVR"]
                }

                dependencies {
                    library 'voidengine' linkage 'shared'
                }
            }

            jniLibs {
                source {
                    srcDir "../voidengine/libs"
                }
            }
            assets {
                source {
                    srcDirs = ["../../../resources"]
                }
            }
        }
    }

//    compileOptions.with {
//        sourceCompatibility = JavaVersion.VERSION_1_7
//        targetCompatibility = JavaVersion.VERSION_1_7
//    }

    android.ndk {
        moduleName = "vrtests"
//        CFlags.add("-I${file("../../../Engine")}".toString())
//        CFlags.add("-I${ndkDir}/sources/android/native_app_glue".toString())
        cppFlags.add("-I${file("../../../Engine")}".toString())
//        //cppFlags += "-I${file("../../../Engine/BaseCore")}".toString()
//        //cppFlags += "-I${file("../../../Engine/Debuger")}".toString()
//        //cppFlags += "-I${file("../../../Engine/FileCore")}".toString()
//        //cppFlags += "-I${file("../../../Engine/KernelCore")}".toString()
//        cppFlags.add("-I${ndkDir}/sources/android/native_app_glue".toString())
        cppFlags.add("-I${file("../../../Dependents")}".toString())
        cppFlags.add("-I${file("../../../Dependents/freetype/include")}".toString())
//        cppFlags.add("-I${file("../../../Dependents/gli")}".toString())
//        cppFlags.add("-I${file("../../../Dependents/glm")}".toString())
        cppFlags.add("-Werror")
        cppFlags.add("-frtti")
        cppFlags.add("-fno-exceptions")
        cppFlags.add("-DANDROID")
        cppFlags.add("-std=c++11")
        ldLibs.addAll(["log", "GLESv3", "EGL", "android"])
        abiFilters.addAll(['armeabi-v7a'])
        stl = "gnustl_static"
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-android.txt'))
        }
    }

}
//dependencies {
//    println rootProject.getName()
//    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile 'com.android.support:appcompat-v7:23.3.0'
//}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':voidengine:distributeLib'
    }
}
dependencies {
    compile project(':voidengine')
}